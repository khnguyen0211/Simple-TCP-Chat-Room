/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package panels;

import DAO.MessageDAO;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.Socket;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import models.Message;

/**
 *
 * @author pnkn0
 */
public class DecryptPanel extends javax.swing.JPanel {

    Socket socket = null;
    BufferedReader bf = null;
    DataOutputStream os = null;
    String sender;
    String receiver;
    String message;
    MessageDAO msgDao = null;

    public JTextArea getTxtMessages() {
        return this.txtMessages;
    }

    /**
     * Creates new form ChatPanel
     */
    public DecryptPanel(Socket socket, String sender, String receiver) {
        initComponents();
        this.setSize(500, 520);
        this.socket = socket;
        this.sender = sender;
        this.receiver = receiver;
        try {
            bf = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            os = new DataOutputStream(socket.getOutputStream());

        } catch (IOException ex) {
            Logger.getLogger(DecryptPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnDecrypt = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtMessages = new javax.swing.JTextArea();

        setBackground(new java.awt.Color(48, 129, 183));
        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Decrypted Message", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Cambria", 1, 16), new java.awt.Color(255, 255, 255))); // NOI18N
        setForeground(new java.awt.Color(255, 255, 255));
        setToolTipText("");

        jPanel1.setBackground(new java.awt.Color(48, 129, 183));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Message", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Cambria", 1, 14), new java.awt.Color(255, 255, 255))); // NOI18N

        btnDecrypt.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        btnDecrypt.setForeground(new java.awt.Color(48, 129, 183));
        btnDecrypt.setText("VIEW MESSAGE");
        btnDecrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDecryptActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(136, 136, 136)
                .addComponent(btnDecrypt)
                .addContainerGap(164, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(btnDecrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        txtMessages.setEditable(false);
        txtMessages.setBackground(new java.awt.Color(255, 255, 255));
        txtMessages.setColumns(20);
        txtMessages.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        txtMessages.setRows(5);
        jScrollPane2.setViewportView(txtMessages);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(15, 15, 15))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(15, 15, 15))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnDecryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDecryptActionPerformed
        msgDao = new MessageDAO();
        try {
            if (socket != null) {
                String msg = "";
                if ((msg = bf.readLine()) != null && msg.length() > 0) {
                    String realMsg = msg.substring(0, msg.length() - 1);
                    int key = Integer.parseInt(msg.charAt(msg.length() - 1) + "");
                    String decryptedMsg = caesarDecrypt(realMsg, key);
                    
                    String showDialog = "Message: " + realMsg + "\nKey: " + key;
                    Message message = new Message(realMsg, key, decryptedMsg, "Admin");
                    
                    int dialogResult = JOptionPane.showConfirmDialog(null, "Thông tin được mã hóa:\n" + receiver + ": " + realMsg, "Xác nhận", JOptionPane.YES_NO_OPTION);

                    if (dialogResult == JOptionPane.YES_OPTION) {
                        msgDao.insertMessage(message);
                        try {
                            Map<Character, Integer> charCounts = countCharacters(caesarDecrypt(realMsg, key));
                            String analyst = "";
                            for (Map.Entry<Character, Integer> entry : charCounts.entrySet()) {
                                analyst += entry.getKey() + ": " + entry.getValue() + "-";
                            }
                           
                            os.writeBytes(analyst);
                            os.write(13);
                            os.write(10);
                            os.flush();
                            this.txtMessages.append("(decrypted) " + receiver + ": " + caesarDecrypt(realMsg, key) + "\n");

                        } catch (IOException ex) {
                            Logger.getLogger(SendFilePanel.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } else {
                        // Người dùng chọn "No"
                        this.txtMessages.append("(encrypted) " + receiver + ": " + realMsg + "\n");
                        os.writeBytes("");
                        os.write(13);
                        os.write(10);
                        os.flush();
                    }
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(DecryptPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DecryptPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDecryptActionPerformed

    public static Map<Character, Integer> countCharacters(String str) {
        Map<Character, Integer> charCounts = new HashMap<>();

        for (int i = 0; i < str.length(); i++) {
            char c = str.charAt(i);
            if (Character.isLetter(c)) {
                int count = charCounts.getOrDefault(c, 0);
                charCounts.put(c, count + 1);
            }
        }
        return charCounts;
    }

    public static String caesarDecrypt(String message, int key) {
        String decrypted = "";
        for (int i = 0; i < message.length(); i++) {
            char ch = message.charAt(i);
            if (Character.isLetter(ch)) {
                if (Character.isUpperCase(ch)) {
                    char c = (char) (ch - key);
                    if (c < 'A') {
                        decrypted += (char) (ch + (26 - key));
                    } else {
                        decrypted += c;
                    }
                } else if (Character.isLowerCase(ch)) {
                    char c = (char) (ch - key);
                    if (c < 'a') {
                        decrypted += (char) (ch + (26 - key));
                    } else {
                        decrypted += c;
                    }
                }
            } else {
                decrypted += ch;
            }
        }
        return decrypted;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDecrypt;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea txtMessages;
    // End of variables declaration//GEN-END:variables
}
